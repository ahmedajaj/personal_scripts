# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- js

pool:
  vmImage: ubuntu-latest

steps:
- script: |
    npm install
    npm run test | tee ./console.log
    LAUNCH_ID=$(sed -nE 's/.*ReportPortal Launch Link: .*\/([0-9]+).*/\1/p' console.log)
    echo $LAUNCH_ID
    echo "##vso[task.setvariable variable=RP_LAUNCH_ID;]$LAUNCH_ID"
    echo "##vso[task.setvariable variable=TEST;]TESTVALUE"
    echo $(TEST)
    echo $RP_LAUNCH_ID
    echo $(RP_LAUNCH_ID)
  displayName: 'Run build'

- script: |
    QUALITY_GATE_STATUS=""
    START_TIME=$(date +%s)

    # Loop until quality gate status is obtained or timeout is reached
    while [[ -z "$QUALITY_GATE_STATUS" && $(( $(date +%s) - START_TIME )) -lt $(SCRIPT_TIMEOUT_SECONDS) ]]; do
      printf "Waiting for quality gate status...\n"
      sleep 10
      
      # Retrieve quality gate status using curl and jq
      QUALITY_GATE_STATUS=$(curl -s --retry 3 --max-time "$(REQUEST_TIMEOUT_SECONDS)" -H "Authorization: Bearer $(RP_API_KEY)" "$(RP_INSTANCE_URL)/api/v1/$(RP_PROJECT)/launch/$RP_LAUNCH_ID" | jq -r '.metadata.qualityGate.status // empty')
    done

    # Check quality gate status and take appropriate action
    if [[ "$QUALITY_GATE_STATUS" != "PASSED" ]]; then
      printf "Quality gate status: %s\nFailing the pipeline.\n" "$QUALITY_GATE_STATUS"
      exit 1
    else
      printf "Quality gate status: %s\nPipeline passed.\n" "$QUALITY_GATE_STATUS"
    fi

  displayName: 'Quality gates'