trigger:
- main

pool:
  vmImage: windows-latest

steps:
- powershell: |
    # Run npm install
    npm install
      
    # Run npm run test and save the output to console.log
    npm run test | Tee-Object -FilePath ./console.log
      
    # Use Select-String to extract the Launch ID from console.log using a regex
    $LAUNCH_ID = (Get-Content -Path ./console.log | Select-String -Pattern '.*ReportPortal Launch Link: .*\/([0-9]+).*' | ForEach-Object { $_.Matches.Groups[1].Value })
      
    # Print the Launch ID
    Write-Output $LAUNCH_ID
      
    # Set the variable RP_LAUNCH_ID for Azure DevOps
    Write-Output "##vso[task.setvariable variable=RP_LAUNCH_ID;]$LAUNCH_ID"
  displayName: 'Run build'

- task: PowerShell@2
  condition: always()
  displayName: 'Quality gates'
  env:
    RP_API_KEY: $(RP_API_KEY)
  inputs:
    targetType: 'inline'
    script: |
      $QUALITY_GATE_STATUS = ""
      $END_TIME = (Get-Date).AddSeconds($env:SCRIPT_TIMEOUT_SECONDS)
     
      # Loop until quality gate status is obtained or timeout is reached
      while (-not $QUALITY_GATE_STATUS -and (Get-Date) -lt $END_TIME ) {
          Write-Host "Launch ID $env:RP_LAUNCH_ID. Waiting for quality gate status...."
          Start-Sleep -Seconds 10
      
          # Retrieve quality gate status using Invoke-RestMethod and ConvertFrom-Json
          $response = Invoke-RestMethod -Uri "$env:RP_INSTANCE_URL/api/v1/$env:RP_PROJECT/launch/$env:RP_LAUNCH_ID" `
                                         -Headers @{ Authorization = "Bearer $env:RP_API_KEY" } `
                                         -Method Get -TimeoutSec $env:REQUEST_TIMEOUT_SECONDS
          $QUALITY_GATE_STATUS = $response.metadata.qualityGate.status
      }
      
      # Check quality gate status and take appropriate action
      if ($QUALITY_GATE_STATUS -ne "PASSED") {
          Write-Host "Quality gate status: $QUALITY_GATE_STATUS"
          Write-Host "Failing the pipeline."
          exit 1
      } else {
          Write-Host "Quality gate status: $QUALITY_GATE_STATUS"
          Write-Host "Pipeline passed."
      }
